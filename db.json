{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c8904c974d7c04ec49f3abd1dc4b56b9b24ca44","modified":1527732633672},{"_id":"source/favicon.ico","hash":"822401324009c49021e6feea57b882278897942a","modified":1527732633682},{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1527747826398},{"_id":"themes/melody/.eslintrc","hash":"cfcd1b454efdd6cc1a0d43be7bc79027b84531f7","modified":1527747826398},{"_id":"themes/melody/.gitignore","hash":"7ed73f0edfb682b12a42070fd2730d5d712ec2fa","modified":1527747826399},{"_id":"themes/melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1527747826399},{"_id":"themes/melody/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1527747826400},{"_id":"themes/melody/README.md","hash":"dd203ba6fd7b5719137cc5e9f8e18f5eaddc96ae","modified":1527747826401},{"_id":"themes/melody/_config.yml","hash":"ab1fe10b3d3dafa20c012515eaf4d713beb0f343","modified":1527747826401},{"_id":"themes/melody/package.json","hash":"1a085e47cbce39f0fce09c4b27efb45bb2eb81da","modified":1527747826416},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1527747826442},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527747826416},{"_id":"source/_data/melody.yml","hash":"d3201af21ffba4deb00dd99dc37b70fe3203ff9e","modified":1528730502519},{"_id":"source/_posts/flex.md","hash":"ff7125785fe14557d21049e09e1e865a43e3b770","modified":1527771788870},{"_id":"source/categories/index.md","hash":"2d64a02bd5c53c593d3852218cd47bf6645b41a7","modified":1527732633679},{"_id":"source/tags/index.md","hash":"fc4edd119f3d1c51d9f43ed055cb7afb986a0984","modified":1527732633686},{"_id":"themes/melody/.git/COMMIT_EDITMSG","hash":"95ce2598262caa9df85b1b7958a13a79b31b36c1","modified":1527748613271},{"_id":"themes/melody/.git/HEAD","hash":"1c8a3861b6d2ee1af4d47959b7562a767f8480ae","modified":1527747826383},{"_id":"themes/melody/.git/config","hash":"d7809cc4a5501b6ffc35ff5550336da4742592fe","modified":1527747826390},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527747820066},{"_id":"themes/melody/.git/index","hash":"1581c4f852f06b2b65b744c782c536690cdb04a0","modified":1528730451617},{"_id":"themes/melody/.git/packed-refs","hash":"45ff5e9b4dc9dece633e81729606b17de19d4ffc","modified":1527747826377},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"c5f14119189d9930fd7afd6e8822592fcd314ecf","modified":1527747826398},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1527747826399},{"_id":"themes/melody/.vscode/settings.json","hash":"2e4acade0812cbeaf1363971c696a1d52d4f05ba","modified":1527747826400},{"_id":"themes/melody/languages/default.yml","hash":"5859596db5ed9b2e7f86874c4df71409323ef9b8","modified":1527747826402},{"_id":"themes/melody/languages/en.yml","hash":"5859596db5ed9b2e7f86874c4df71409323ef9b8","modified":1527747826403},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"a0b752f18dd31e56c3e4ae6860f87f92c2e1a95c","modified":1527747826403},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1527747826403},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1527747826403},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1527747826403},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1527747826414},{"_id":"themes/melody/layout/page.pug","hash":"6bb4336f74784679ac3f8691b0cce427f2282e02","modified":1527747826414},{"_id":"themes/melody/layout/post.pug","hash":"84268639485e56638f07805f65b965caf69c201a","modified":1527747826415},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1527747826415},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1527747826415},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1527747826416},{"_id":"themes/melody/scripts/replace-config.js","hash":"3439d79603f66830925a19e136e9ead54a85ed8b","modified":1527747826417},{"_id":"themes/melody/source/favicon.ico","hash":"822401324009c49021e6feea57b882278897942a","modified":1527747826424},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527747826426},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527747820067},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527747820067},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527747820068},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527747820068},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527747820067},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527747820069},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527747820067},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527747820068},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527747820068},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527747820069},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527747820066},{"_id":"themes/melody/.git/logs/HEAD","hash":"b9521ca9f69c39cd31f0fe9ad191bce12c254ac0","modified":1527748613390},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"fd53e30c9c5bc497538753c8c6a2bc3294f03494","modified":1527747826404},{"_id":"themes/melody/layout/includes/config.pug","hash":"f11a6427cf7c06b357b336ba6ba60149c324c750","modified":1527747826405},{"_id":"themes/melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1527747826406},{"_id":"themes/melody/layout/includes/head.pug","hash":"eb40f41ad1b1133c4a210009af7e9cc4b8b8eabd","modified":1527747826407},{"_id":"themes/melody/layout/includes/header.pug","hash":"7efbfdb22ed0a76d707bbe83cca95a89b548c6ee","modified":1527747826407},{"_id":"themes/melody/layout/includes/layout.pug","hash":"56a6eca22e050faf4ace834294f9c07bfb07291a","modified":1527747826407},{"_id":"themes/melody/layout/includes/nav.pug","hash":"d9d341d690a03680ef66c4d84715cab1f5a39372","modified":1527747826409},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"556d055e2f0c30d41ec16ef7943bd3227afcdfd1","modified":1527747826409},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"aefcb3462d1b9ed2fb8d16414a4f580fc4e7a4e7","modified":1527747826409},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4369f692f5069f3d510e35c00de2702cb90761b2","modified":1527748497071},{"_id":"themes/melody/source/css/index.styl","hash":"111ec52cde3e5fae92cf61dc2a1bd8726b3aa8f9","modified":1527747826424},{"_id":"themes/melody/source/css/var.styl","hash":"bbb372afd00ecdeee767266692e9f0792ac6be2f","modified":1527747826424},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527747826425},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1527747826425},{"_id":"themes/melody/source/js/copy.js","hash":"cfae08721664d19cf0059172b994c0a2e253d334","modified":1527747826425},{"_id":"themes/melody/source/js/fancybox.js","hash":"0c2c506559129a5108893cf054b9aa46fe878fc3","modified":1527747826426},{"_id":"themes/melody/source/js/fireworks.js","hash":"5e3da1344966d5d6328a410cad69e92297699f3b","modified":1527747826426},{"_id":"themes/melody/source/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1527747826426},{"_id":"themes/melody/source/js/scroll.js","hash":"73d57e7cf9921ba5724ad48b8d0e8b25dbce059f","modified":1527747826427},{"_id":"themes/melody/source/js/sidebar.js","hash":"185790b0d811fd7eeb96f78b1b1195dd71df1da6","modified":1527748410886},{"_id":"themes/melody/source/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1527747826441},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1527747826442},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527747826407},{"_id":"themes/melody/.git/objects/03/fecc945f3433e8b013c174a76680acdf423948","hash":"42f354de1e0991791218a5f7f040729147beb3f2","modified":1527748599354},{"_id":"themes/melody/.git/objects/18/7384fea0ccea1d3ef1d029ef52e58786d11bcf","hash":"87dd9893c9e70a2d2a5388b13d9ece1c7eafb0ea","modified":1527748592848},{"_id":"themes/melody/.git/objects/19/5bf4906000fb01a3aafff445a228fc00886f4a","hash":"07afbf4b358aac2fb6f890f38a759f4b543f1a37","modified":1527748599353},{"_id":"themes/melody/.git/objects/26/80626f52accc2f2af8d0e6524267868d5ef864","hash":"d1cb42f733cfd60c04634b8b7248dae522da4ec3","modified":1527748599349},{"_id":"themes/melody/.git/objects/4b/6b40d8a7f8d57d1310e09add8b7af18ce2cda4","hash":"13b973cc2e8e1cf800f09abcba947f6793ba91b3","modified":1527748599355},{"_id":"themes/melody/.git/objects/59/5053267e60d0dceb7ecbd912c9b03256c5dc5b","hash":"d3b27c2faf0f38413423eba167a9b7df715959a2","modified":1527748613385},{"_id":"themes/melody/.git/objects/8d/de72159d4e8bcd8a0c7328eb79e7b203b15cc8","hash":"61112d87153dbf3cabbb4f9607b549c5c31689c3","modified":1527748599352},{"_id":"themes/melody/.git/objects/aa/15ca30c1a31c31b7599c121c32ffefcf7c16be","hash":"62bbbb6061d60490c865ed66b02fc433caec8a4a","modified":1527748599350},{"_id":"themes/melody/.git/objects/cd/53413903193d76e6501ad8fef77941d671e40b","hash":"df9bd6257cb75f07f7add95cc5b28a76fd76673d","modified":1527748592849},{"_id":"themes/melody/.git/objects/e7/54ed474ed66bbe1db31c4ab3245e83b7d1f1c1","hash":"3f8bbafe9fd9488c4808885efc01e1d0f43f6447","modified":1527748592852},{"_id":"themes/melody/.git/objects/ec/f8d7468422d6896731aefa390a82bf9ce44e89","hash":"103965422a71584c290d3073263af3a9da95b4e8","modified":1527748599350},{"_id":"themes/melody/.git/objects/pack/pack-9057a617059a73ace91b451aac3acbe584571538.idx","hash":"f477fe265785385fde3b1ef197797d54795f0336","modified":1527747826357},{"_id":"themes/melody/.git/refs/heads/moke","hash":"ea0566aa509718467e741a6396bf40e6d01ab513","modified":1527748613390},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"989de5ed05fb462e5a46601eb41ab3963b4d4e9d","modified":1527747826404},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1527747826405},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"4a9e172c2b7a9f6f1f8c313d0d45266de828f209","modified":1527747826405},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"6c16214e5945142e5f3b58e7694397e26f28849d","modified":1527747826405},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1527747826405},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"e87eca6aed5a7e234a8acaa93e08ed674cb1531e","modified":1527747826405},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"43fd52287adef41dc083738e25f24390d72b572c","modified":1527747826406},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1527747826407},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"da7572fcc4aac6b63a651a3320e5d853ea07b347","modified":1527747826408},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1527747826408},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1527747826410},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1527747826410},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"85347ad18da0a81bfa7b0c0a8643886f4c0cacc1","modified":1527747826410},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1527747826411},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"65ea837388ddf806f89c3b9082ceb31776dc6be5","modified":1527747826411},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"f428b3bbc7a22d176098826c5e0aadf32b47f865","modified":1527747826411},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"6b24f298d442e409c1149e4c1df38efce0453883","modified":1527747826413},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"c35c2af397f41bb858070032c702e8503371fd07","modified":1527747826413},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"035656871566bdcb8c45d3a0fe0b0835c524eb11","modified":1527747826414},{"_id":"themes/melody/source/css/_global/index.styl","hash":"c3418bbacedfe134f64f2ad5e7ae7a9b7292f84f","modified":1527747826418},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1527747826418},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"a0c6043011caf916d734673403c6543559acf68f","modified":1527747826418},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1527747826419},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1527747826419},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"a72a6bb4477c18a14a2b779db183df22b4cba272","modified":1527747826419},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"049c5eddcb2ee80fdce91992087df2e7b80afd9c","modified":1527747826420},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"79d551beaea2458abcedbf585618b9fa8d3d22e5","modified":1527747826420},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1527747826420},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"9bdd9b5c957c3c5494cdf0b40700fd1f08162ac5","modified":1527747826421},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"67b99a55f6fc9daa42de9c73c2adc61bd7513de6","modified":1527748484409},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"8129d254a30e3a66cdb7eb77253036221928f47b","modified":1527747826422},{"_id":"themes/melody/source/css/_search/index.styl","hash":"031b1577e8a07f18c047b27e6b4723b14ae018b0","modified":1527747826422},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"e1b082bfb4e04ffe42efa149b02fdb66aad682a7","modified":1527747826422},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1527747826423},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1527747826423},{"_id":"themes/melody/source/js/search/algolia.js","hash":"884ecf62fe22cb869bbb7968ee770c1a699f591d","modified":1527747826427},{"_id":"themes/melody/source/js/search/local-search.js","hash":"951bbc3fe459a448d5a3e555ad84225272d91071","modified":1527747826427},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1527747826428},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1527747826429},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1527747826441},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1527747826441},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1527747826431},{"_id":"themes/melody/.git/logs/refs/heads/moke","hash":"b9521ca9f69c39cd31f0fe9ad191bce12c254ac0","modified":1527748613391},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1527747826383},{"_id":"themes/melody/.git/refs/remotes/origin/moke","hash":"ea0566aa509718467e741a6396bf40e6d01ab513","modified":1527748626171},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1527747826431},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1527747826438},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1527747826438},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1527747826439},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1527747826439},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1527747826440},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1527747826440},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"06448caa5844a778e7a16fa88022943bbbce4c8e","modified":1527747826383},{"_id":"themes/melody/.git/logs/refs/remotes/origin/moke","hash":"0e218c0dfd33772fcea44156ec5dada2a3e79e0c","modified":1527748626173},{"_id":"themes/melody/.git/objects/pack/pack-9057a617059a73ace91b451aac3acbe584571538.pack","hash":"b2a4dee01208e0e065bc108391d026320d0b74f6","modified":1527748599000},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1527747826437},{"_id":"public/categories/index.html","hash":"a7f8cdcf98d8973a5d2fe1bf6765a9930e829d1f","modified":1528730524695},{"_id":"public/tags/index.html","hash":"828179a2eda58267865e5732436c55f5b2b6de56","modified":1528730524695},{"_id":"public/archives/index.html","hash":"3a245221c054fd68a4e212a9d912dcd07efff2e1","modified":1528730524696},{"_id":"public/archives/2017/index.html","hash":"3ba74ce14d9cc89eed285a91afa0a857457b3082","modified":1528730524696},{"_id":"public/archives/2017/11/index.html","hash":"45d7ef8bfbdfeb39d5753da55cb15a6804a3fcf9","modified":1528730524696},{"_id":"public/categories/CSS/index.html","hash":"e7014433c1734454db709ca8683f1891d3b05b9c","modified":1528730524696},{"_id":"public/index.html","hash":"1dd49cabf1ef95d86dc2b2fa6c46095ad5e6c08f","modified":1528730524696},{"_id":"public/tags/CSS/index.html","hash":"2993448599d83614619a886efa22b12aaec4b501","modified":1528730524696},{"_id":"public/2017/11/20/flex/index.html","hash":"de48a9e21e413004a1800bf241ee52c11305b9d9","modified":1528730524697},{"_id":"public/CNAME","hash":"3c8904c974d7c04ec49f3abd1dc4b56b9b24ca44","modified":1527771603847},{"_id":"public/favicon.ico","hash":"822401324009c49021e6feea57b882278897942a","modified":1527771603847},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527771603847},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1527771603847},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527771604420},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527771604421},{"_id":"public/js/copy.js","hash":"cfae08721664d19cf0059172b994c0a2e253d334","modified":1527771604421},{"_id":"public/js/fancybox.js","hash":"0c2c506559129a5108893cf054b9aa46fe878fc3","modified":1527771604421},{"_id":"public/js/fireworks.js","hash":"5e3da1344966d5d6328a410cad69e92297699f3b","modified":1527771604421},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1527771604421},{"_id":"public/js/scroll.js","hash":"73d57e7cf9921ba5724ad48b8d0e8b25dbce059f","modified":1527771604421},{"_id":"public/js/sidebar.js","hash":"185790b0d811fd7eeb96f78b1b1195dd71df1da6","modified":1527771604421},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1527771604421},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1527771604421},{"_id":"public/js/search/algolia.js","hash":"884ecf62fe22cb869bbb7968ee770c1a699f591d","modified":1527771604422},{"_id":"public/js/search/local-search.js","hash":"951bbc3fe459a448d5a3e555ad84225272d91071","modified":1527771604422},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1527771604422},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1527771604422},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1527771604422},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1527771604422},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1527771604422},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1527771604422},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1527771604422},{"_id":"public/css/index.css","hash":"8c74bcf0c68f8a431878fdea07806cf7f1b8fd94","modified":1527771604422},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1527771604422},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1527771604422},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1527771604423},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1527771604423},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1527771604423},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1527771604423},{"_id":"source/_posts/深入理解this.md","hash":"c43bfe2df486a93bfc8b68ad2e496b16d1d856ea","modified":1528726220802},{"_id":"themes/melody/.git/FETCH_HEAD","hash":"84651db39e11c708309b622dca732d0a38ebcb87","modified":1528726205096},{"_id":"source/_posts/this.md","hash":"13e32b94fdcda57dafae823f252def570cd2a2ba","modified":1528729949025},{"_id":"public/archives/2018/index.html","hash":"4e41385ba4476b60a7ca25041189618073e24c0c","modified":1528730524696},{"_id":"public/archives/2018/06/index.html","hash":"6419d645e080a6c7252f80e55d19738f2526faea","modified":1528730524696},{"_id":"public/categories/Javascript/index.html","hash":"5b455008c4a4f706b7e08789c3ebd3b17a0d5b8b","modified":1528730524696},{"_id":"public/tags/Javascript/index.html","hash":"e6ca942d86bfb677c203d1302d3b36d83d21366d","modified":1528730524696},{"_id":"public/2018/06/11/this/index.html","hash":"7c7f935d409bf185725aaf023f0c65dfbf331214","modified":1528730524696},{"_id":"themes/melody/.git/sourcetreeconfig","hash":"8f91ae6cdb51997e284df340107141ce0e6cf5a2","modified":1528730402394},{"_id":"themes/melody/.git/objects/00/94296097c860ac8fe24a30e3ce09d2eac189ec","hash":"e99110be7f3889bf10932cd7ced01a2d8eead11c","modified":1528730410000},{"_id":"themes/melody/.git/objects/00/ab2242c8133d35b8d9bef7e856fd38866c81be","hash":"c1699dccc6d4e942544cab4f72291920e7f5bfab","modified":1528730410000},{"_id":"themes/melody/.git/objects/0a/180ecad0ef0c2597fa9d583ccca8a83e42a561","hash":"e7885aab4edf37cd711374f57bda31926e4cbb1b","modified":1528730410000},{"_id":"themes/melody/.git/objects/0e/e7bb7482026214a1d0c657edd078fdbac20aaf","hash":"84df4f63a3b00a412a53172f9c1fb4effb822c5f","modified":1528730410000},{"_id":"themes/melody/.git/objects/0f/b7c8fe9a41200661c94772b4ed18563f897bf1","hash":"3e647252d92dbff6e944ced1f3de07132f76681b","modified":1528730410000},{"_id":"themes/melody/.git/objects/16/b013b5d3d3567ebd0d028755a51cdad7151b94","hash":"9848da796401977abdae374300452648b1ce37b6","modified":1528730410000},{"_id":"themes/melody/.git/objects/16/cc47b626408b11088ed4098f82f762aa9df781","hash":"59de9d0bb4c0ffd71dd3c2c88612eb946a4bb30e","modified":1528730410000},{"_id":"themes/melody/.git/objects/19/aa8d7de969ceabf57e247867cebed3eaffd341","hash":"ece0efed0e4a9dcfaa4977172f3898084dbe6db4","modified":1528730410000},{"_id":"themes/melody/.git/objects/19/dd228efe7876400aad7111d090494fbd1ba8e4","hash":"0a1a480bd840a60037bf4ef4f61f04aa06e05c9d","modified":1528730410000},{"_id":"themes/melody/.git/objects/19/f8fb61df4b04a4ba56130453e195d319c7cfa5","hash":"0ef46a0ab4e3eecdb60c6e37203f0e6a22ce273b","modified":1528730410000},{"_id":"themes/melody/.git/objects/1b/e3073434fadefa99fbbe336a74329cdb1d35ae","hash":"71780bc05658396ed163cb3479866d8811342622","modified":1528730410000},{"_id":"themes/melody/.git/objects/1d/42cae33b327d34e877fe5e9864e3a942081c80","hash":"388e25926c24f4f18c9d9e1114fe2139acc9da24","modified":1528730410000},{"_id":"themes/melody/.git/objects/1e/e277bd5cbbc392f6c7b4eee48358d111574b04","hash":"50c5d17856cab388809946c296496caa012d10bc","modified":1528730410000},{"_id":"themes/melody/.git/objects/22/91379a16396a9ae37004c4a35f11ecfdec2f9e","hash":"62b070161e13b1a529f336f7c8760a7fdfed8c5f","modified":1528730410000},{"_id":"themes/melody/.git/objects/26/e717814fe821fd8200235862fbc77018ffa57e","hash":"013077d47cdf7c6e47f152fe39f88fd0ce17ad75","modified":1528730410000},{"_id":"themes/melody/.git/objects/26/f8e07ac578d68f11a8abcdea6fac8e5d979086","hash":"d59c6760b739c398363489a3cfb281484f9fd2bd","modified":1528730410000},{"_id":"themes/melody/.git/objects/28/52b1e2d3337e6e755c4cdbb37affcf6781bb89","hash":"e09598e04195092fcccc563f3777a403fc1edb58","modified":1528730410000},{"_id":"themes/melody/.git/objects/2a/c27b2fe45c4c9b357d5772a7b25fbf97c1d5ce","hash":"f8dd80b939187869f28e3b24ebc8080170beb514","modified":1528730410000},{"_id":"themes/melody/.git/objects/2c/45630f4e2576766563007fee936cef4947b056","hash":"626b933aa3573cda9246db2178ca03dc62f1c0ad","modified":1528730410000},{"_id":"themes/melody/.git/objects/2c/97b807c80881ba2c7ab20f35f2318539657e46","hash":"43248f0b2906e3e8e56165f97cb7a77540b99c65","modified":1528730410000},{"_id":"themes/melody/.git/objects/31/a4a66b946b9fc9da86eaa1cc5de3c1b38f2eda","hash":"7b5b0785966455a49886440b48abbec3e7b38a2f","modified":1528730410000},{"_id":"themes/melody/.git/objects/33/4aab81e9f3a47e016a6c57ba92a0b7294fe4a5","hash":"b471479c41d2161c2fc4f71a41d04c2af23b2033","modified":1528730410000},{"_id":"themes/melody/.git/objects/39/764da67bada3278773ee54b0b8f7868c318093","hash":"7c231704264f9ae7cf1080adfd8c2eaf6c1968f1","modified":1528730410000},{"_id":"themes/melody/.git/objects/39/df1bc29c65460f9784d9c60eedfd59ae6f9ac6","hash":"f2610577e2addf8f6a94ccd2bf295a8cf9794e33","modified":1528730410000},{"_id":"themes/melody/.git/objects/3d/01edfb84ded3b17404bc30cedc6034722812b4","hash":"0ebc581641e351c86f1d58036f1ee423ec62f700","modified":1528730410000},{"_id":"themes/melody/.git/objects/42/7cfb37e63a0795ff7d76e6dede7a230e18419d","hash":"ef04ce2f6f0bcf9889d6bf4b6af5ccfe2b2519e6","modified":1528730410000},{"_id":"themes/melody/.git/objects/44/4087aade1f5368d8a61ac29ddffbe596e8140d","hash":"70a634bc2ca8223a7ebe17d3eaa5ebf20c79aaeb","modified":1528730410000},{"_id":"themes/melody/.git/objects/46/60bd1b7d6d98c2d2ae31dc9bda7a3a37eac36e","hash":"ada00b935e07b473b3e9a0816e3cd782b7509e58","modified":1528730410000},{"_id":"themes/melody/.git/objects/47/0242341d65c3217ba5989f87ca8161cd048c6a","hash":"48e87276771f9de95d9ec1f846a7cac06be1e3e9","modified":1528730410000},{"_id":"themes/melody/.git/objects/47/2ac2361b65136b393d652de25341e2ea44f299","hash":"74116cab2994fa70e5ae047cb511deac2c34f624","modified":1528730410000},{"_id":"themes/melody/.git/objects/47/873d443b61021a4bb68fc2d99b84f0280c35e9","hash":"94e7622dd13738ea03cc9600eff321bc24f97e22","modified":1528730410000},{"_id":"themes/melody/.git/objects/49/e79aac26e20500020f0fcc36e97a88a72e6048","hash":"d1f2a7ac9785c2ff0e6488bb4e377b50b431ed9c","modified":1528730410000},{"_id":"themes/melody/.git/objects/49/f7b64d509de838f94e26dad1dac0ff650268d3","hash":"6c3ea5146e014d86a40d989735cea19f883ae6d4","modified":1528730410000},{"_id":"themes/melody/.git/objects/4d/17a641df95e1b2e090eb2f8c51e300decc05bf","hash":"3b46ad268e3a23282f799aae32b4096f724145a0","modified":1528730410000},{"_id":"themes/melody/.git/objects/4e/71988aca1c6e20a156461fefb18d70d7b8377f","hash":"878b3bcfb162144e13c40c06e9f6f7b1804d314c","modified":1528730410000},{"_id":"themes/melody/.git/objects/54/169fd903dfd88c8281e45c9dd43f8565110bcb","hash":"2c8e48ad8a6e5e0db6f3982fcaf3cd79720047de","modified":1528730410000},{"_id":"themes/melody/.git/objects/55/5c1dc1d9da18154cb48388d5e494f3f16119f8","hash":"9ebe13c1052a12dd3ff04e2ccf6a102f68d2eea4","modified":1528730410000},{"_id":"themes/melody/.git/objects/56/601233a0308a615f395ee8592eab594c8a4900","hash":"a6c53515f6d799d3c32ec7d973408694b249b5cd","modified":1528730410000},{"_id":"themes/melody/.git/objects/5c/081e0f5d4499e60c3b8d5b94d2c0a646531ed6","hash":"3e0b50adb1319369909e293ca885f1db9197b514","modified":1528730410000},{"_id":"themes/melody/.git/objects/64/4d35e274fd64ddaf6d12af813e820c424176a9","hash":"989065111c61a95e4080799a003362a6f26478d1","modified":1528730410000},{"_id":"themes/melody/.git/objects/65/2d1ff600dc0ea347c08497bf6e456bbdbfca39","hash":"a0d46f1cfba946cf01788fa1fa710893958f366c","modified":1528730410000},{"_id":"themes/melody/.git/objects/65/ab4aacc68569720ca34610d63a688b5b424343","hash":"d0232f9b5d102815eb76f939a24219aea6b301a5","modified":1528730410000},{"_id":"themes/melody/.git/objects/67/1d3c5c0c9987df601313638cfc676121a2ea34","hash":"73074087e009f655a3cd8b59eb9cc5c71b8cb010","modified":1528730410000},{"_id":"themes/melody/.git/objects/69/1ef79c0246fe2d13fd0b071f6f26c27f333c17","hash":"92554b67a92fec7860b3d0e616744f1a434ebc68","modified":1528730410000},{"_id":"themes/melody/.git/objects/6b/8681599e04a250436d411682253c12ebffee61","hash":"324be301ddfc378c4e48b577abe88202c9b3bbd1","modified":1528730410000},{"_id":"themes/melody/.git/objects/6b/8e5ad6a81c00445ae46034b2499fad8dec0df3","hash":"3f4e448b4c04fa5c6314f7d9407b3746e1b4bcfd","modified":1528730410000},{"_id":"themes/melody/.git/objects/6e/295cc5a4a6460acd6221d4d3120a8d7a4d4c99","hash":"f90eca17050f78e21d932345edc03456e7e49cbd","modified":1528730410000},{"_id":"themes/melody/.git/objects/84/18be0adaf06d42331ce7ca7196d8300eaa7b56","hash":"1eb16eb63a0d6c1118ce4cd491207231deb65522","modified":1528730410000},{"_id":"themes/melody/.git/objects/8b/0ec90ab8a9148b39b38794d57f164885ee4175","hash":"4c5c2872ec989384500a41902d1240f0944a924a","modified":1528730410000},{"_id":"themes/melody/.git/objects/8e/8f7f6cdd67871b02eb2f1bdd82e998cb00559a","hash":"9659adc98c9956219aa731717121a8fda6d97346","modified":1528730410000},{"_id":"themes/melody/.git/objects/8f/54670a6ebdedfbebab5cf54c64df06e10d0570","hash":"daf68e67f574e371428df27a52168e9c1e249ecc","modified":1528730410000},{"_id":"themes/melody/.git/objects/92/3ccc78a6fe33873cf5010c859b059b320d1133","hash":"1d519ca9ad1f279721d7558aea6f9b089e7bdb6a","modified":1528730410000},{"_id":"themes/melody/.git/objects/93/7d65f3c26c597f871cf662b6c2292dac24f341","hash":"f85f0c6f4e635503bc29207f6d99dadb4c09087b","modified":1528730410000},{"_id":"themes/melody/.git/objects/94/f1d36999ea7e2787fe6bc63c1e27ff7854d730","hash":"07ba72a2066473735d8fbc9cef5169944bcde621","modified":1528730410000},{"_id":"themes/melody/.git/objects/98/145c7caba87a5f0a2690c524e9eb240e5d084c","hash":"5e8e5679422bc7584586dbab7642a7c3c7dba164","modified":1528730410000},{"_id":"themes/melody/.git/objects/9d/7f244e1db2f9666930fe2a621acdace49ec011","hash":"b707d29c80ee15ff9035b1e6dc41394a6ad153af","modified":1528730410000},{"_id":"themes/melody/.git/objects/a8/0e44af98924dedfbbc00d568302640d248f329","hash":"2d1b45b3bca7a7e2ef2f17ef28d40fb7c7a0f4cf","modified":1528730410000},{"_id":"themes/melody/.git/objects/ab/39c7a4b1d23a3722c52a29a9fb6a46036cbc38","hash":"e1af7a5abb364e9b979fb9c9bc96b897e7cae539","modified":1528730410000},{"_id":"themes/melody/.git/objects/ac/408dda2dc56ae63d74f2128d3f1d8f3463502c","hash":"329ace2340377456c54e13a275753b70a5284a38","modified":1528730410000},{"_id":"themes/melody/.git/objects/ac/f906fa52da03048132b29f001607ce000018af","hash":"897d281c91c792b031c6f8fd2fac0d3a38def5a6","modified":1528730410000},{"_id":"themes/melody/.git/objects/b0/4c842a3bbad519072502dd07eabc4bd1c2bcd4","hash":"6fe09f242d6c5763b10ff1f328eb0129bbf03c21","modified":1528730410000},{"_id":"themes/melody/.git/objects/b1/bb0949bbb9f40f8012c516bd7240020cf78a85","hash":"3bbee2981aa522edeae116e990d57340e97f0c37","modified":1528730410000},{"_id":"themes/melody/.git/objects/b4/5fb6adfe64cf369f25844f2b0d8480fcfd6920","hash":"064ade2a3a8791f49b063c08bf7db98111e7e4d8","modified":1528730410000},{"_id":"themes/melody/.git/objects/b8/39e132e507feb08bfed77ae4684a15a7dc0d19","hash":"c42907967b08e797ac3d5dcdcfd5392436f55346","modified":1528730410000},{"_id":"themes/melody/.git/objects/ba/e2e63b91b0c92b5dca393fcd34721ecb937e76","hash":"79f35a9e7991ce1f84410c051dc1c33af1700ce3","modified":1528730410000},{"_id":"themes/melody/.git/objects/bf/4e465b11ea157076179d2a62ea98ddf158dac2","hash":"377c772b078dff5320515e5670bbf6ef57b16f3c","modified":1528730410000},{"_id":"themes/melody/.git/objects/bf/79adddccf42c20ddd5f6c25725fcae5896d6f2","hash":"0c6268da77375e728fc0fdbfd5affed8df07df6d","modified":1528730410000},{"_id":"themes/melody/.git/objects/bf/fac26e645361cdb605a15085b1b358ac754a73","hash":"fcad6190c3c6f77d06b9d66730ca5b5ee61c3fbb","modified":1528730410000},{"_id":"themes/melody/.git/objects/c0/40f5bcb3ae1740bb816c9c6ec507b01b43e2d3","hash":"d3d86a0726e96aa344a949e99edce0dd7185c1a5","modified":1528730410000},{"_id":"themes/melody/.git/objects/c4/78b1f57c783526ecc36ef19b007695d7da6335","hash":"033c94fd4858c48db55bf50de6bb9ee5ce3e307b","modified":1528730410000},{"_id":"themes/melody/.git/objects/c6/e1447eaff554578e794bf6a9770a37b907d205","hash":"48553b1e8dbc465cf563b9e020d3a6d08dc8cfcb","modified":1528730410000},{"_id":"themes/melody/.git/objects/c8/129c9a4b83dd663397e62f5eefb0de0aa35ee1","hash":"37edb958a9564844379f199f1ddd677cfb003d7e","modified":1528730410000},{"_id":"themes/melody/.git/objects/c9/8348d6a28434045814197f50c25ecb0276a89a","hash":"fe976d83709c22216b5de75a6ccda96feab3ab1e","modified":1528730410000},{"_id":"themes/melody/.git/objects/c9/c4ffe819f3d3914b3847f7fd99c4a35d50d12d","hash":"9d0e64d8be95a79bc4eafd9ae5f2bdf75462c694","modified":1528730410000},{"_id":"themes/melody/.git/objects/ce/a05b4e208c440fc088209955048c08d45e7d4d","hash":"e00ffe83761412e0b85c11094ab9085a4e189763","modified":1528730410000},{"_id":"themes/melody/.git/objects/ce/d190922aa537c2b32ea2d5bb1531a91ba36229","hash":"0d61f954a58cc68593dba5f0261ab001d6736194","modified":1528730410000},{"_id":"themes/melody/.git/objects/d0/deae6e2e30b41ca285b2e197154f07afb87f5e","hash":"0c4ef0ddce74451943af178eec8b6340d224819f","modified":1528730410000},{"_id":"themes/melody/.git/objects/d2/f7afe0eb26d7621868829801f828b749917e97","hash":"f9e1a59d4d6cc340a443c63f5bb30c8c42dca1c8","modified":1528730410000},{"_id":"themes/melody/.git/objects/d3/4afcf5abca3f210a39999ddeb570599b0d41c7","hash":"aeb33dd5524b5c7cd5a861df84dbd8dc9f24524b","modified":1528730410000},{"_id":"themes/melody/.git/objects/d3/ee3d084f01e287f18acae4b66f9ab4fe5f5a67","hash":"18920de6a10a8a4f03610310d1a63e4c0d59df32","modified":1528730410000},{"_id":"themes/melody/.git/objects/d8/7e91425214c188797004b532fac58b2e0c2625","hash":"7a73153b1c99dfab534b2bf744643d266add9120","modified":1528730410000},{"_id":"themes/melody/.git/objects/d9/f87bac70d7d6bcca6f9785f3cf51f62372e8ad","hash":"367362c116aa748b4449da241826501025b1c095","modified":1528730410000},{"_id":"themes/melody/.git/objects/de/91adeaf2a180d97cc3614809d882185b632bd4","hash":"c0997135b24e01b0f0d71135156955aaefc0561c","modified":1528730410000},{"_id":"themes/melody/.git/objects/e3/589a6baa4f53579df5ac0a673ee78204e44c69","hash":"a30e24443df94299547b5c28bd3b80f059f865cb","modified":1528730410000},{"_id":"themes/melody/.git/objects/e3/b97799ae2556fcd8d2b1bfbe2a9317bf89be96","hash":"22e702ac6e10a7e901ce8e605b4f175d07d5ce52","modified":1528730410000},{"_id":"themes/melody/.git/objects/e5/e20f0ed4f1a68ff839885bbaac3e609deaf0e1","hash":"619f2eecfa4fc2a6a8d8a5cf058e8ff59eed46bf","modified":1528730410000},{"_id":"themes/melody/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391","hash":"c2baae88d6364d878fd67e778c6a5d8306ad4ab0","modified":1528730410000},{"_id":"themes/melody/.git/objects/e7/6361d1707a60dbce701daf9a1208d8d49208be","hash":"e76790629752391d32e8def0bb945cf0b1828023","modified":1528730410000},{"_id":"themes/melody/.git/objects/e9/d946c8dcd97a4d7e87cff5f998f01c755014b6","hash":"1a732a386e64ccfcdf84e731940bbadad2fbcee3","modified":1528730410000},{"_id":"themes/melody/.git/objects/f0/6813108ce48c038c6e20fdc964f311790f6602","hash":"cbdcb0a77ebb77067bf059a154bb33a86dba4720","modified":1528730410000},{"_id":"themes/melody/.git/objects/f0/7c9f678bb715c288e0951b4842864e464a287d","hash":"f7f17899ef1886b6c8b405e137be5f5bc903df9e","modified":1528730410000},{"_id":"themes/melody/.git/objects/f1/9332d7cb9f1558ad6c6cf812c7922eb838e431","hash":"4074092630c92ef0b3a84c10bc48716ad9f44683","modified":1528730410000},{"_id":"themes/melody/.git/objects/f5/9adecec750884693600906fae734e7fda0ebc6","hash":"37dfb319797788e1d54f976f2cf7c4e3886195d9","modified":1528730410000},{"_id":"themes/melody/.git/objects/f6/0a336be2db83e935911273f2f736ba6873370d","hash":"7bc087b4b6b5471c9f0a6ffe08c0273e6411fc01","modified":1528730410000},{"_id":"themes/melody/.git/objects/2c/ba9dccf28dddad1effeb8af0ba0726bf46df36","hash":"171d17baaeb9d84fd5e880b36c729da1c8784aa0","modified":1528730410000}],"Category":[{"name":"CSS","_id":"cjhujrk9i0003alph0c10k5jl"},{"name":"Javascript","_id":"cjia9okwx000152fy1x7naex4"}],"Data":[{"_id":"melody","data":{"language":"en","menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"darker","social":{"github":"https://github.com/sijianian"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":true,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":"9bda50d8ad09c691b013c21b520dea45","stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"https://static.skynian.cn/README-2018611232116.jpg","top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}],"Page":[{"title":"分类","date":"2017-09-11T02:53:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-09-11 10:53:14\ntype: \"categories\"\n---\n","updated":"2018-05-31T02:10:33.679Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjhujrk9d0001alph5pilkyn1","content":"","site":{"data":{"melody":{"language":"en","menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"darker","social":{"github":"https://github.com/sijianian"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":true,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":"9bda50d8ad09c691b013c21b520dea45","stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"https://avatars3.githubusercontent.com/u/17903414?s=460&v=4","top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":""},{"title":"标签","date":"2017-09-11T02:51:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-09-11 10:51:01\ntype: \"tags\"\n---\n","updated":"2018-05-31T02:10:33.686Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjhujrk9g0002alph67drgefu","content":"","site":{"data":{"melody":{"language":"en","menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"darker","social":{"github":"https://github.com/sijianian"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":true,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":"9bda50d8ad09c691b013c21b520dea45","stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"https://avatars3.githubusercontent.com/u/17903414?s=460&v=4","top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":""}],"Post":[{"title":"浅谈Flex布局","date":"2017-11-20T07:24:44.000Z","_content":"\n![](https://static.skynian.cn/flex-2018531202556.jpg)\n\nFlexbox 实现了帮助我们脱离 CSS 苦海（例如垂直居中）的目标，但想要精通它却需要应对一些挑战。\n\n<!--more-->\n\n本次，我们将深入探讨 flexbox 中的 5 个常见的属性\n\n## 属性 1：Display;Flex\n\n以下是实例页面：\n\n![](https://static.skynian.cn/flex-2018531202637.gif)\n\n\n我们可以看到，在灰色的容器中，包含了 4 中不同颜色与大小的 div 元素，每个元素都默认 display:block,因此每个立方体都占据了一行的整个宽度。\n\n为了开始使用 Flexbox 布局，需要把容器变成 Flex 容器\n\n```css\n#container {\n  display: flex;\n  display: -webkit-flex;\n}\n```\n\n![](https://static.skynian.cn/flex-2018531204333.gif)\n\n## 属性 2：Flex Direction\n\nFlexbox 容器有两根轴：主轴和垂直的交叉轴，默认情况如下：\n\n![](https://static.skynian.cn/flex-2018531204418.gif)\n\n**项目默认是由主轴（从左到右）排列的**，这就是你使用 display:flex 后，四方体以水平线排列的原因\n\n而 Flex-direction 决定了主轴的方向\n\n```css\n#container {\n  display: flex;\n  flex-direction: column;\n}\n```\n\n![](https://static.skynian.cn/flex-2018531204454.gif)\n\n**这里有一个重要的区别：**flex-direction:column**所指的是四方体将沿主轴的垂直方向对齐，它使主轴自身从水平到垂直**\n\n而 flex-direction 还有一些其他的值供你选择，例如：row-reverse 与 column-reverse\n\n![](https://static.skynian.cn/flex-2018531204544.gif)\n\n## 属性 3：Justify Content\n\njustify-content 属性定义了项目在主轴上的对齐方式。\n\n在这里，你将更多的了解主轴与交叉轴的区别。首先，让我们回到 flex-direction:row 值上\n\n```css\n#container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n```\n\njustify-content 属性包含了 5 个值供你使用\n\n> 1.Flex-start\n> 2.Flex-end\n> 3.Center\n> 4.Space-between\n> 5.Space-around\n\n![](https://static.skynian.cn/flex-2018531204619.gif)\n\nSpace-around 与 Space-between 是两个不容易直观理解的值。Space-between 实现了两端对齐，而四方体之间的间隔都是相等的。\nSpace-around 使四方体两侧的间隔相等，这意味着四方体之间的间隔比最外边四方体与边框的间隔要大一倍。（每个四方体贡献了不重叠的等量余量，从而使空间翻倍）\n\n最后一点：请记住 justify-content 沿主轴对齐，而 flex-direction 决定了主轴的方向。它将决定你移动的方向。\n\n作者：IT 程序狮子烨链接：https://zhuanlan.zhihu.com/p/25152672\n来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n## 属性 4：Align Items\n\n当你理解了 justify-content 属性，理解 Align Items 属性就变得轻而易举了。\n\njustify-content 定义了项目在主轴的对齐方式，而 align-items 属性则定义了项目在交叉轴上是如何对齐的。\n\n![](https://static.skynian.cn/flex-2018531204650.gif)\n\n当我们将 flex-direction 属性值重置为 row 后，我们的轴看上去就与上图一致。那么，让我们深入的了解下 Align Items 属性有哪些值：\n\n    flex-start\n    flex-end\n    center\n    stretch\n    baseline\n\n前三个值与 justify-content 属性中的值完全一致，没有太多需要解释的地方。\n\n但是，接下来两个值却有些不同。\n\nStretch 指的是如果项目未设置高度或设为 auto，项目将占满整个容器。而 baseline 是指项目将与段落标签的底部对齐。\n\n![](https://static.skynian.cn/flex-2018531204725.gif)\n\n（请注意，对于 align-items：stretch，我不得不将四方体的高度设置为 auto，否则 height 属性将覆盖该 stretch）\n\n对于 baseline，如果你去掉段落标签，它则会对齐四方形的底部，如下图所示：\n\n![](https://static.skynian.cn/flex-2018531204754.gif)\n\n为了更好地演示主轴和交叉轴的表现，在基于 justify-content 属性和 align-items 属性的值为 center 的情况下，让我们看看赋予 flex-direction 属性两个不同值后，它的表现如何：\n\n我们可以看到，\\***\\*对于 row 值，四方体沿着与主轴水平方向排列，而对于 column 值，它们则沿着与主轴垂直的方向排列。\\*\\***\n\n![](https://static.skynian.cn/flex-2018531204835.gif)\n\n## 属性 5：Align Self\n\nalign-self 属性允许你对特定的项目有与其他项目不一样的对齐方式，它可覆盖 align-items 属性。虽然它的默认值为 auto，但它继承了父元素 align-items 的属性。除了 auto 外，其他都与 align-items 属性完全一致。\n\n```css\n#container {\n  align-items: flex-start;\n}\n.square#one {\n  align-self: center;\n}\n```\n\n我们将在四个四方体上应用 align-self 属性，而其余的四方体则应用 align-items:center 与 flex-direction:row，让我们看看会发生什么\n\n![](https://static.skynian.cn/flex-2018531204920.gif)\n\n## 结论\n\n虽然我们只是仅仅了解了 Flexbox 的一些浅层的用法，但是已足够入门\n","source":"_posts/flex.md","raw":"---\ntitle: 浅谈Flex布局\ndate: 2017-11-20 15:24:44\ntags:\n\t- CSS\ncategories: CSS\n---\n\n![](https://static.skynian.cn/flex-2018531202556.jpg)\n\nFlexbox 实现了帮助我们脱离 CSS 苦海（例如垂直居中）的目标，但想要精通它却需要应对一些挑战。\n\n<!--more-->\n\n本次，我们将深入探讨 flexbox 中的 5 个常见的属性\n\n## 属性 1：Display;Flex\n\n以下是实例页面：\n\n![](https://static.skynian.cn/flex-2018531202637.gif)\n\n\n我们可以看到，在灰色的容器中，包含了 4 中不同颜色与大小的 div 元素，每个元素都默认 display:block,因此每个立方体都占据了一行的整个宽度。\n\n为了开始使用 Flexbox 布局，需要把容器变成 Flex 容器\n\n```css\n#container {\n  display: flex;\n  display: -webkit-flex;\n}\n```\n\n![](https://static.skynian.cn/flex-2018531204333.gif)\n\n## 属性 2：Flex Direction\n\nFlexbox 容器有两根轴：主轴和垂直的交叉轴，默认情况如下：\n\n![](https://static.skynian.cn/flex-2018531204418.gif)\n\n**项目默认是由主轴（从左到右）排列的**，这就是你使用 display:flex 后，四方体以水平线排列的原因\n\n而 Flex-direction 决定了主轴的方向\n\n```css\n#container {\n  display: flex;\n  flex-direction: column;\n}\n```\n\n![](https://static.skynian.cn/flex-2018531204454.gif)\n\n**这里有一个重要的区别：**flex-direction:column**所指的是四方体将沿主轴的垂直方向对齐，它使主轴自身从水平到垂直**\n\n而 flex-direction 还有一些其他的值供你选择，例如：row-reverse 与 column-reverse\n\n![](https://static.skynian.cn/flex-2018531204544.gif)\n\n## 属性 3：Justify Content\n\njustify-content 属性定义了项目在主轴上的对齐方式。\n\n在这里，你将更多的了解主轴与交叉轴的区别。首先，让我们回到 flex-direction:row 值上\n\n```css\n#container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n```\n\njustify-content 属性包含了 5 个值供你使用\n\n> 1.Flex-start\n> 2.Flex-end\n> 3.Center\n> 4.Space-between\n> 5.Space-around\n\n![](https://static.skynian.cn/flex-2018531204619.gif)\n\nSpace-around 与 Space-between 是两个不容易直观理解的值。Space-between 实现了两端对齐，而四方体之间的间隔都是相等的。\nSpace-around 使四方体两侧的间隔相等，这意味着四方体之间的间隔比最外边四方体与边框的间隔要大一倍。（每个四方体贡献了不重叠的等量余量，从而使空间翻倍）\n\n最后一点：请记住 justify-content 沿主轴对齐，而 flex-direction 决定了主轴的方向。它将决定你移动的方向。\n\n作者：IT 程序狮子烨链接：https://zhuanlan.zhihu.com/p/25152672\n来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n## 属性 4：Align Items\n\n当你理解了 justify-content 属性，理解 Align Items 属性就变得轻而易举了。\n\njustify-content 定义了项目在主轴的对齐方式，而 align-items 属性则定义了项目在交叉轴上是如何对齐的。\n\n![](https://static.skynian.cn/flex-2018531204650.gif)\n\n当我们将 flex-direction 属性值重置为 row 后，我们的轴看上去就与上图一致。那么，让我们深入的了解下 Align Items 属性有哪些值：\n\n    flex-start\n    flex-end\n    center\n    stretch\n    baseline\n\n前三个值与 justify-content 属性中的值完全一致，没有太多需要解释的地方。\n\n但是，接下来两个值却有些不同。\n\nStretch 指的是如果项目未设置高度或设为 auto，项目将占满整个容器。而 baseline 是指项目将与段落标签的底部对齐。\n\n![](https://static.skynian.cn/flex-2018531204725.gif)\n\n（请注意，对于 align-items：stretch，我不得不将四方体的高度设置为 auto，否则 height 属性将覆盖该 stretch）\n\n对于 baseline，如果你去掉段落标签，它则会对齐四方形的底部，如下图所示：\n\n![](https://static.skynian.cn/flex-2018531204754.gif)\n\n为了更好地演示主轴和交叉轴的表现，在基于 justify-content 属性和 align-items 属性的值为 center 的情况下，让我们看看赋予 flex-direction 属性两个不同值后，它的表现如何：\n\n我们可以看到，\\***\\*对于 row 值，四方体沿着与主轴水平方向排列，而对于 column 值，它们则沿着与主轴垂直的方向排列。\\*\\***\n\n![](https://static.skynian.cn/flex-2018531204835.gif)\n\n## 属性 5：Align Self\n\nalign-self 属性允许你对特定的项目有与其他项目不一样的对齐方式，它可覆盖 align-items 属性。虽然它的默认值为 auto，但它继承了父元素 align-items 的属性。除了 auto 外，其他都与 align-items 属性完全一致。\n\n```css\n#container {\n  align-items: flex-start;\n}\n.square#one {\n  align-self: center;\n}\n```\n\n我们将在四个四方体上应用 align-self 属性，而其余的四方体则应用 align-items:center 与 flex-direction:row，让我们看看会发生什么\n\n![](https://static.skynian.cn/flex-2018531204920.gif)\n\n## 结论\n\n虽然我们只是仅仅了解了 Flexbox 的一些浅层的用法，但是已足够入门\n","slug":"flex","published":1,"updated":"2018-05-31T13:03:08.870Z","_id":"cjhujrk980000alphl80o3kz7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://static.skynian.cn/flex-2018531202556.jpg\" alt=\"\"></p>\n<p>Flexbox 实现了帮助我们脱离 CSS 苦海（例如垂直居中）的目标，但想要精通它却需要应对一些挑战。</p>\n<a id=\"more\"></a>\n<p>本次，我们将深入探讨 flexbox 中的 5 个常见的属性</p>\n<h2 id=\"属性-1：Display-Flex\"><a href=\"#属性-1：Display-Flex\" class=\"headerlink\" title=\"属性 1：Display;Flex\"></a>属性 1：Display;Flex</h2><p>以下是实例页面：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531202637.gif\" alt=\"\"></p>\n<p>我们可以看到，在灰色的容器中，包含了 4 中不同颜色与大小的 div 元素，每个元素都默认 display:block,因此每个立方体都占据了一行的整个宽度。</p>\n<p>为了开始使用 Flexbox 布局，需要把容器变成 Flex 容器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://static.skynian.cn/flex-2018531204333.gif\" alt=\"\"></p>\n<h2 id=\"属性-2：Flex-Direction\"><a href=\"#属性-2：Flex-Direction\" class=\"headerlink\" title=\"属性 2：Flex Direction\"></a>属性 2：Flex Direction</h2><p>Flexbox 容器有两根轴：主轴和垂直的交叉轴，默认情况如下：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204418.gif\" alt=\"\"></p>\n<p><strong>项目默认是由主轴（从左到右）排列的</strong>，这就是你使用 display:flex 后，四方体以水平线排列的原因</p>\n<p>而 Flex-direction 决定了主轴的方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://static.skynian.cn/flex-2018531204454.gif\" alt=\"\"></p>\n<p><strong>这里有一个重要的区别：</strong>flex-direction:column<strong>所指的是四方体将沿主轴的垂直方向对齐，它使主轴自身从水平到垂直</strong></p>\n<p>而 flex-direction 还有一些其他的值供你选择，例如：row-reverse 与 column-reverse</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204544.gif\" alt=\"\"></p>\n<h2 id=\"属性-3：Justify-Content\"><a href=\"#属性-3：Justify-Content\" class=\"headerlink\" title=\"属性 3：Justify Content\"></a>属性 3：Justify Content</h2><p>justify-content 属性定义了项目在主轴上的对齐方式。</p>\n<p>在这里，你将更多的了解主轴与交叉轴的区别。首先，让我们回到 flex-direction:row 值上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>justify-content 属性包含了 5 个值供你使用</p>\n<blockquote>\n<p>1.Flex-start<br>2.Flex-end<br>3.Center<br>4.Space-between<br>5.Space-around</p>\n</blockquote>\n<p><img src=\"https://static.skynian.cn/flex-2018531204619.gif\" alt=\"\"></p>\n<p>Space-around 与 Space-between 是两个不容易直观理解的值。Space-between 实现了两端对齐，而四方体之间的间隔都是相等的。<br>Space-around 使四方体两侧的间隔相等，这意味着四方体之间的间隔比最外边四方体与边框的间隔要大一倍。（每个四方体贡献了不重叠的等量余量，从而使空间翻倍）</p>\n<p>最后一点：请记住 justify-content 沿主轴对齐，而 flex-direction 决定了主轴的方向。它将决定你移动的方向。</p>\n<p>作者：IT 程序狮子烨链接：<a href=\"https://zhuanlan.zhihu.com/p/25152672\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25152672</a><br>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"属性-4：Align-Items\"><a href=\"#属性-4：Align-Items\" class=\"headerlink\" title=\"属性 4：Align Items\"></a>属性 4：Align Items</h2><p>当你理解了 justify-content 属性，理解 Align Items 属性就变得轻而易举了。</p>\n<p>justify-content 定义了项目在主轴的对齐方式，而 align-items 属性则定义了项目在交叉轴上是如何对齐的。</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204650.gif\" alt=\"\"></p>\n<p>当我们将 flex-direction 属性值重置为 row 后，我们的轴看上去就与上图一致。那么，让我们深入的了解下 Align Items 属性有哪些值：</p>\n<pre><code>flex-start\nflex-end\ncenter\nstretch\nbaseline\n</code></pre><p>前三个值与 justify-content 属性中的值完全一致，没有太多需要解释的地方。</p>\n<p>但是，接下来两个值却有些不同。</p>\n<p>Stretch 指的是如果项目未设置高度或设为 auto，项目将占满整个容器。而 baseline 是指项目将与段落标签的底部对齐。</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204725.gif\" alt=\"\"></p>\n<p>（请注意，对于 align-items：stretch，我不得不将四方体的高度设置为 auto，否则 height 属性将覆盖该 stretch）</p>\n<p>对于 baseline，如果你去掉段落标签，它则会对齐四方形的底部，如下图所示：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204754.gif\" alt=\"\"></p>\n<p>为了更好地演示主轴和交叉轴的表现，在基于 justify-content 属性和 align-items 属性的值为 center 的情况下，让我们看看赋予 flex-direction 属性两个不同值后，它的表现如何：</p>\n<p>我们可以看到，*<strong>*对于 row 值，四方体沿着与主轴水平方向排列，而对于 column 值，它们则沿着与主轴垂直的方向排列。**</strong></p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204835.gif\" alt=\"\"></p>\n<h2 id=\"属性-5：Align-Self\"><a href=\"#属性-5：Align-Self\" class=\"headerlink\" title=\"属性 5：Align Self\"></a>属性 5：Align Self</h2><p>align-self 属性允许你对特定的项目有与其他项目不一样的对齐方式，它可覆盖 align-items 属性。虽然它的默认值为 auto，但它继承了父元素 align-items 的属性。除了 auto 外，其他都与 align-items 属性完全一致。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-id\">#one</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将在四个四方体上应用 align-self 属性，而其余的四方体则应用 align-items:center 与 flex-direction:row，让我们看看会发生什么</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204920.gif\" alt=\"\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>虽然我们只是仅仅了解了 Flexbox 的一些浅层的用法，但是已足够入门</p>\n","site":{"data":{"melody":{"language":"en","menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"darker","social":{"github":"https://github.com/sijianian"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":true,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":"9bda50d8ad09c691b013c21b520dea45","stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"https://avatars3.githubusercontent.com/u/17903414?s=460&v=4","top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<p><img src=\"https://static.skynian.cn/flex-2018531202556.jpg\" alt=\"\"></p>\n<p>Flexbox 实现了帮助我们脱离 CSS 苦海（例如垂直居中）的目标，但想要精通它却需要应对一些挑战。</p>","more":"<p>本次，我们将深入探讨 flexbox 中的 5 个常见的属性</p>\n<h2 id=\"属性-1：Display-Flex\"><a href=\"#属性-1：Display-Flex\" class=\"headerlink\" title=\"属性 1：Display;Flex\"></a>属性 1：Display;Flex</h2><p>以下是实例页面：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531202637.gif\" alt=\"\"></p>\n<p>我们可以看到，在灰色的容器中，包含了 4 中不同颜色与大小的 div 元素，每个元素都默认 display:block,因此每个立方体都占据了一行的整个宽度。</p>\n<p>为了开始使用 Flexbox 布局，需要把容器变成 Flex 容器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://static.skynian.cn/flex-2018531204333.gif\" alt=\"\"></p>\n<h2 id=\"属性-2：Flex-Direction\"><a href=\"#属性-2：Flex-Direction\" class=\"headerlink\" title=\"属性 2：Flex Direction\"></a>属性 2：Flex Direction</h2><p>Flexbox 容器有两根轴：主轴和垂直的交叉轴，默认情况如下：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204418.gif\" alt=\"\"></p>\n<p><strong>项目默认是由主轴（从左到右）排列的</strong>，这就是你使用 display:flex 后，四方体以水平线排列的原因</p>\n<p>而 Flex-direction 决定了主轴的方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://static.skynian.cn/flex-2018531204454.gif\" alt=\"\"></p>\n<p><strong>这里有一个重要的区别：</strong>flex-direction:column<strong>所指的是四方体将沿主轴的垂直方向对齐，它使主轴自身从水平到垂直</strong></p>\n<p>而 flex-direction 还有一些其他的值供你选择，例如：row-reverse 与 column-reverse</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204544.gif\" alt=\"\"></p>\n<h2 id=\"属性-3：Justify-Content\"><a href=\"#属性-3：Justify-Content\" class=\"headerlink\" title=\"属性 3：Justify Content\"></a>属性 3：Justify Content</h2><p>justify-content 属性定义了项目在主轴上的对齐方式。</p>\n<p>在这里，你将更多的了解主轴与交叉轴的区别。首先，让我们回到 flex-direction:row 值上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>justify-content 属性包含了 5 个值供你使用</p>\n<blockquote>\n<p>1.Flex-start<br>2.Flex-end<br>3.Center<br>4.Space-between<br>5.Space-around</p>\n</blockquote>\n<p><img src=\"https://static.skynian.cn/flex-2018531204619.gif\" alt=\"\"></p>\n<p>Space-around 与 Space-between 是两个不容易直观理解的值。Space-between 实现了两端对齐，而四方体之间的间隔都是相等的。<br>Space-around 使四方体两侧的间隔相等，这意味着四方体之间的间隔比最外边四方体与边框的间隔要大一倍。（每个四方体贡献了不重叠的等量余量，从而使空间翻倍）</p>\n<p>最后一点：请记住 justify-content 沿主轴对齐，而 flex-direction 决定了主轴的方向。它将决定你移动的方向。</p>\n<p>作者：IT 程序狮子烨链接：<a href=\"https://zhuanlan.zhihu.com/p/25152672\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25152672</a><br>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"属性-4：Align-Items\"><a href=\"#属性-4：Align-Items\" class=\"headerlink\" title=\"属性 4：Align Items\"></a>属性 4：Align Items</h2><p>当你理解了 justify-content 属性，理解 Align Items 属性就变得轻而易举了。</p>\n<p>justify-content 定义了项目在主轴的对齐方式，而 align-items 属性则定义了项目在交叉轴上是如何对齐的。</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204650.gif\" alt=\"\"></p>\n<p>当我们将 flex-direction 属性值重置为 row 后，我们的轴看上去就与上图一致。那么，让我们深入的了解下 Align Items 属性有哪些值：</p>\n<pre><code>flex-start\nflex-end\ncenter\nstretch\nbaseline\n</code></pre><p>前三个值与 justify-content 属性中的值完全一致，没有太多需要解释的地方。</p>\n<p>但是，接下来两个值却有些不同。</p>\n<p>Stretch 指的是如果项目未设置高度或设为 auto，项目将占满整个容器。而 baseline 是指项目将与段落标签的底部对齐。</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204725.gif\" alt=\"\"></p>\n<p>（请注意，对于 align-items：stretch，我不得不将四方体的高度设置为 auto，否则 height 属性将覆盖该 stretch）</p>\n<p>对于 baseline，如果你去掉段落标签，它则会对齐四方形的底部，如下图所示：</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204754.gif\" alt=\"\"></p>\n<p>为了更好地演示主轴和交叉轴的表现，在基于 justify-content 属性和 align-items 属性的值为 center 的情况下，让我们看看赋予 flex-direction 属性两个不同值后，它的表现如何：</p>\n<p>我们可以看到，*<strong>*对于 row 值，四方体沿着与主轴水平方向排列，而对于 column 值，它们则沿着与主轴垂直的方向排列。**</strong></p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204835.gif\" alt=\"\"></p>\n<h2 id=\"属性-5：Align-Self\"><a href=\"#属性-5：Align-Self\" class=\"headerlink\" title=\"属性 5：Align Self\"></a>属性 5：Align Self</h2><p>align-self 属性允许你对特定的项目有与其他项目不一样的对齐方式，它可覆盖 align-items 属性。虽然它的默认值为 auto，但它继承了父元素 align-items 的属性。除了 auto 外，其他都与 align-items 属性完全一致。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-id\">#one</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将在四个四方体上应用 align-self 属性，而其余的四方体则应用 align-items:center 与 flex-direction:row，让我们看看会发生什么</p>\n<p><img src=\"https://static.skynian.cn/flex-2018531204920.gif\" alt=\"\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>虽然我们只是仅仅了解了 Flexbox 的一些浅层的用法，但是已足够入门</p>"},{"title":"深入理解this","date":"2018-06-11T12:53:06.000Z","_content":"\n![](https://static.skynian.cn/深入理解this-201861122106.jpg)\n\nthis是JavaScript中的一个关键字，同时也是让人又爱又恨的特性。\n\n<!--more-->\n\n如果没有\b彻底理解\b和掌握这个特性，可能真的会一次又一次\b\b踩坑，不要问我是怎么知道的o(╯□╰)o\n\n可能this不是JS中最复杂的内容，但是它的细节也是蔚为大观。涉及到了函数、函数调用、eval、call/apply/bind、基本包装类型、构造函数实例化、严格模式等等。\n\n\b与此同时ES6引入的箭头函数和\bclass更是把this复杂化了。\n\n其实网上关于this的介绍和总结很多，但是不乏会有很多错漏的地方，笔者\b写这篇博客也是为了做一次总结，同时巩固，更重要的是希望能出坑......\n\n\b\b一个最基本的认知是，this的值会发生变化，但是有一个总的原则，那就是this指向的是调用函数的那个对象。\n\n## 情况\b一：纯粹的函数调用\n\n这是函数的最通常用法，属于全局性调用，因此this就代表着全局对象Global\n\n```js\nfunction func1() {\n  console.log(this === window) // true\n}\nfunc1()\n\nconst func2 = function() {\n  console.log(this === window) // true\n}\nfunc2()\n\nfunction func3() {\n  \"use strict\"\n  console.log(this) // undefined\n}\n```\n\n从上述代码中，我们可以看出，如果不是处于严格模式下，函数的上下文是window对象，严格模式下，函数上下文为undefined。\n\n## 情况二：作为对象方法的调用\n\n函数还可以作为某个对象方法调用，这时this就指这个上级对象\n\n```js\nfunction test() {\n  alert(this.x)\n}\n\nle o = {}\no.x = 1\no.m = test\no.m() // 1\n```\n\n其实，我们这时返回看情况一，实际上可以看出”func1()“，可以理解为“window.func1()”，所以例子中的函数上下文便是this。\n\n## 情况三： 作为构造函数调用\n\n所谓构造函数，\b也就是通过这个函数生成一个新对象（object）。这个时候，this就是指这个新对象。\n\n```js\nfunction test(){\n  this.x = 1\n}\n\nlet o = new test()\nlaert(o.x) // 1\n```\n\n运行结果为1，为了表明这时this对象不是全局对象，我对代码做一点改变：\n\n```js\nlet x = 2\n\nfunction test() {\n  this.x = 1\n}\n\nlet o = new test()\n\nalert(x) // 2\n```\n\n## 情况四： 使用apply()和call()方法进行调用\n\n\bapply()和call()是函数对象中的方法，它的作用是改变函数的调用对象，可以利用任何一个函数都可以显式指定任何一个对象作为其函数上下文。\n\n通过 apply() 方法来调用函数，我们要给 apply() 传入两个参数：一个作为函数上下文对象，另一个作为函数参数所组成的数组。call() 方法的使用方式类似，唯一不同的是给函数传入的参数是一个参数列表，而不是单个数组。\n\n```js\nfunction func() {\n    let result = 0;\n    for(let i = 0; i < arguments.length; i++) {\n        result += arguments[i];\n    }\n    this.result = result;\n}\nconst obj1 = {};\nconst obj2 = {};\nfunc.apply(obj1, [1, 2, 3]);\nfunc.call(obj2, 4, 5, 6);\n\nconsole.log(obj1.result === 6); // true\nconsole.log(obj2.result === 15); // true\n```\n\n在上面的代码中，`func.apply(obj1, [1, 2, 3]);` 将函数的上下文定义为 obj1，并且传入 1、2、3 三个参数，`func.call(obj2, 4, 5, 6);` 将函数的上下文定义为 obj2，并且传入 4、5、6 三个参数。\n\n那 apply 和 call 基本相同，那么我们该用哪一个呢？其实 apply 和 call 的区别仅仅在于调用时传入的参数不同，其他完全一样。所以，在选择时，主要看传入的参数。如果已知参数已经在数组里了则用 apply 即可，或者参数是动态生成的，可以把参数 push 进一个数组，然后再用 apply 调用。当参数数量已知，或者在参数里有很多无关的值则用 call 方法调用。\n\n## ES6 与 this\n\nES6 中引入了一个很棒的特性：箭头函数。说其棒，主要源于其书写简单，更重要的是其使得 this 更易于理解。\n\nES6 中，箭头函数中始终会捕捉其所在上下文的 this 值，作为自己的 this。这一点非常重要，省去了我们很多的麻烦。但对于那些习惯了每个 function 中都有自己 this 的人来说，可能还有些不习惯。举个例子吧，就拿调用方式 2 中的例子。\n\n```js\nconst obj = {\n    func: () => {\n        console.log(this === window); // true，非箭头函数时指向 obj\n    }\n};\nobj.func();\n```\n\n在上面的例子中，func 所在上下文的 this 值指向 window，而 func 是一个箭头函数，所以其里面的 this 会捕捉其所在上下文的 this 作为自己的 this， 所以 func 内的 this 也指向 window 对象。\n\n## 其他补充\n\n> 利用 bind() 改变函数上下文\n\n```js\nconst obj1 = {\n    a: 1\n};\nconst obj2 = {\n    a: 2,\n    func: function() {\n        console.log(this.a);\n    }.bind(obj1)\n};\nobj2.func(); // 1\n```\n\nECMAScript 5 引入了 `Function.prototype.bind`，其会创建一个绑定函数，当调用这个绑定函数时，函数上下文将会是 bind() 方法的第一个参数。上面的例子中，将 obj1 设置为函数上下文，所以利用 func 来调用函数时，函数的上下文为 obj1，而不是它的调用者 obj2。\n\n\n利用 Array 的 5 个方法改变函数上下文\n\n5 个方法分别是：\n\n`Array.prototype.every(callbackfn [, thisArg ])`\n`Array.prototype.some(callbackfn [, thisArg ])`\n`Array.prototype.forEach(callbackfn [, thisArg ])`\n`Array.prototype.map(callbackfn [, thisArg ])`\n`Array.prototype.filter(callbackfn [, thisArg ])`\n\n\n当调用以上 5 个方法时，传入的参数除了回调函数以外，还可以传入另外一个可选地参数，即函数上下文，代表回调函数中的函数上下文。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。看下面的例子：\n\n```js\nconst arr = [\"segmentfault\"];\nconst obj = {};\narr.forEach(function(ele, ind) {\n    console.log(this === window); // true\n});\narr.forEach(function(ele, ind) {\n    console.log(this === obj);    // true\n}, obj);\n```\n\n## 测试\n\n```js\nif (true) {\n    // this\n}\n```\n\n```js\nconst obj = {\n    someData: \"a string\"\n};\nfunction myFun() {\n    // this\n}\nobj.staticFunction = myFun;\nobj.staticFunction();\n```\n\n```js\nconst obj = {\n    myMethod : function () {\n        // this\n    }\n};\nconst myFun = obj.myMethod;\nmyFun();\n```\n\n```js\nfunction myFun() {\n    // this\n}\nconst obj = {\n    someData: \"a string\"\n};\nmyFun.call(obj);\n```\n\n答案：\n\nwindow\n\nobj\n\nwindow\n\nobj","source":"_posts/this.md","raw":"---\ntitle: 深入理解this\ndate: 2018-06-11 20:53:06\ntags:\n  - Javascript\ncategories: Javascript\n---\n\n![](https://static.skynian.cn/深入理解this-201861122106.jpg)\n\nthis是JavaScript中的一个关键字，同时也是让人又爱又恨的特性。\n\n<!--more-->\n\n如果没有\b彻底理解\b和掌握这个特性，可能真的会一次又一次\b\b踩坑，不要问我是怎么知道的o(╯□╰)o\n\n可能this不是JS中最复杂的内容，但是它的细节也是蔚为大观。涉及到了函数、函数调用、eval、call/apply/bind、基本包装类型、构造函数实例化、严格模式等等。\n\n\b与此同时ES6引入的箭头函数和\bclass更是把this复杂化了。\n\n其实网上关于this的介绍和总结很多，但是不乏会有很多错漏的地方，笔者\b写这篇博客也是为了做一次总结，同时巩固，更重要的是希望能出坑......\n\n\b\b一个最基本的认知是，this的值会发生变化，但是有一个总的原则，那就是this指向的是调用函数的那个对象。\n\n## 情况\b一：纯粹的函数调用\n\n这是函数的最通常用法，属于全局性调用，因此this就代表着全局对象Global\n\n```js\nfunction func1() {\n  console.log(this === window) // true\n}\nfunc1()\n\nconst func2 = function() {\n  console.log(this === window) // true\n}\nfunc2()\n\nfunction func3() {\n  \"use strict\"\n  console.log(this) // undefined\n}\n```\n\n从上述代码中，我们可以看出，如果不是处于严格模式下，函数的上下文是window对象，严格模式下，函数上下文为undefined。\n\n## 情况二：作为对象方法的调用\n\n函数还可以作为某个对象方法调用，这时this就指这个上级对象\n\n```js\nfunction test() {\n  alert(this.x)\n}\n\nle o = {}\no.x = 1\no.m = test\no.m() // 1\n```\n\n其实，我们这时返回看情况一，实际上可以看出”func1()“，可以理解为“window.func1()”，所以例子中的函数上下文便是this。\n\n## 情况三： 作为构造函数调用\n\n所谓构造函数，\b也就是通过这个函数生成一个新对象（object）。这个时候，this就是指这个新对象。\n\n```js\nfunction test(){\n  this.x = 1\n}\n\nlet o = new test()\nlaert(o.x) // 1\n```\n\n运行结果为1，为了表明这时this对象不是全局对象，我对代码做一点改变：\n\n```js\nlet x = 2\n\nfunction test() {\n  this.x = 1\n}\n\nlet o = new test()\n\nalert(x) // 2\n```\n\n## 情况四： 使用apply()和call()方法进行调用\n\n\bapply()和call()是函数对象中的方法，它的作用是改变函数的调用对象，可以利用任何一个函数都可以显式指定任何一个对象作为其函数上下文。\n\n通过 apply() 方法来调用函数，我们要给 apply() 传入两个参数：一个作为函数上下文对象，另一个作为函数参数所组成的数组。call() 方法的使用方式类似，唯一不同的是给函数传入的参数是一个参数列表，而不是单个数组。\n\n```js\nfunction func() {\n    let result = 0;\n    for(let i = 0; i < arguments.length; i++) {\n        result += arguments[i];\n    }\n    this.result = result;\n}\nconst obj1 = {};\nconst obj2 = {};\nfunc.apply(obj1, [1, 2, 3]);\nfunc.call(obj2, 4, 5, 6);\n\nconsole.log(obj1.result === 6); // true\nconsole.log(obj2.result === 15); // true\n```\n\n在上面的代码中，`func.apply(obj1, [1, 2, 3]);` 将函数的上下文定义为 obj1，并且传入 1、2、3 三个参数，`func.call(obj2, 4, 5, 6);` 将函数的上下文定义为 obj2，并且传入 4、5、6 三个参数。\n\n那 apply 和 call 基本相同，那么我们该用哪一个呢？其实 apply 和 call 的区别仅仅在于调用时传入的参数不同，其他完全一样。所以，在选择时，主要看传入的参数。如果已知参数已经在数组里了则用 apply 即可，或者参数是动态生成的，可以把参数 push 进一个数组，然后再用 apply 调用。当参数数量已知，或者在参数里有很多无关的值则用 call 方法调用。\n\n## ES6 与 this\n\nES6 中引入了一个很棒的特性：箭头函数。说其棒，主要源于其书写简单，更重要的是其使得 this 更易于理解。\n\nES6 中，箭头函数中始终会捕捉其所在上下文的 this 值，作为自己的 this。这一点非常重要，省去了我们很多的麻烦。但对于那些习惯了每个 function 中都有自己 this 的人来说，可能还有些不习惯。举个例子吧，就拿调用方式 2 中的例子。\n\n```js\nconst obj = {\n    func: () => {\n        console.log(this === window); // true，非箭头函数时指向 obj\n    }\n};\nobj.func();\n```\n\n在上面的例子中，func 所在上下文的 this 值指向 window，而 func 是一个箭头函数，所以其里面的 this 会捕捉其所在上下文的 this 作为自己的 this， 所以 func 内的 this 也指向 window 对象。\n\n## 其他补充\n\n> 利用 bind() 改变函数上下文\n\n```js\nconst obj1 = {\n    a: 1\n};\nconst obj2 = {\n    a: 2,\n    func: function() {\n        console.log(this.a);\n    }.bind(obj1)\n};\nobj2.func(); // 1\n```\n\nECMAScript 5 引入了 `Function.prototype.bind`，其会创建一个绑定函数，当调用这个绑定函数时，函数上下文将会是 bind() 方法的第一个参数。上面的例子中，将 obj1 设置为函数上下文，所以利用 func 来调用函数时，函数的上下文为 obj1，而不是它的调用者 obj2。\n\n\n利用 Array 的 5 个方法改变函数上下文\n\n5 个方法分别是：\n\n`Array.prototype.every(callbackfn [, thisArg ])`\n`Array.prototype.some(callbackfn [, thisArg ])`\n`Array.prototype.forEach(callbackfn [, thisArg ])`\n`Array.prototype.map(callbackfn [, thisArg ])`\n`Array.prototype.filter(callbackfn [, thisArg ])`\n\n\n当调用以上 5 个方法时，传入的参数除了回调函数以外，还可以传入另外一个可选地参数，即函数上下文，代表回调函数中的函数上下文。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。看下面的例子：\n\n```js\nconst arr = [\"segmentfault\"];\nconst obj = {};\narr.forEach(function(ele, ind) {\n    console.log(this === window); // true\n});\narr.forEach(function(ele, ind) {\n    console.log(this === obj);    // true\n}, obj);\n```\n\n## 测试\n\n```js\nif (true) {\n    // this\n}\n```\n\n```js\nconst obj = {\n    someData: \"a string\"\n};\nfunction myFun() {\n    // this\n}\nobj.staticFunction = myFun;\nobj.staticFunction();\n```\n\n```js\nconst obj = {\n    myMethod : function () {\n        // this\n    }\n};\nconst myFun = obj.myMethod;\nmyFun();\n```\n\n```js\nfunction myFun() {\n    // this\n}\nconst obj = {\n    someData: \"a string\"\n};\nmyFun.call(obj);\n```\n\n答案：\n\nwindow\n\nobj\n\nwindow\n\nobj","slug":"this","published":1,"updated":"2018-06-11T15:12:29.025Z","_id":"cjiac5mz900006xfyruubkfrn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://static.skynian.cn/深入理解this-201861122106.jpg\" alt=\"\"></p>\n<p>this是JavaScript中的一个关键字，同时也是让人又爱又恨的特性。</p>\n<a id=\"more\"></a>\n<p>如果没有\b彻底理解\b和掌握这个特性，可能真的会一次又一次\b\b踩坑，不要问我是怎么知道的o(╯□╰)o</p>\n<p>可能this不是JS中最复杂的内容，但是它的细节也是蔚为大观。涉及到了函数、函数调用、eval、call/apply/bind、基本包装类型、构造函数实例化、严格模式等等。</p>\n<p>\b与此同时ES6引入的箭头函数和\bclass更是把this复杂化了。</p>\n<p>其实网上关于this的介绍和总结很多，但是不乏会有很多错漏的地方，笔者\b写这篇博客也是为了做一次总结，同时巩固，更重要的是希望能出坑……</p>\n<p>\b\b一个最基本的认知是，this的值会发生变化，但是有一个总的原则，那就是this指向的是调用函数的那个对象。</p>\n<h2 id=\"情况一：纯粹的函数调用\"><a href=\"#情况一：纯粹的函数调用\" class=\"headerlink\" title=\"情况\b一：纯粹的函数调用\"></a>情况\b一：纯粹的函数调用</h2><p>这是函数的最通常用法，属于全局性调用，因此this就代表着全局对象Global</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> func2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上述代码中，我们可以看出，如果不是处于严格模式下，函数的上下文是window对象，严格模式下，函数上下文为undefined。</p>\n<h2 id=\"情况二：作为对象方法的调用\"><a href=\"#情况二：作为对象方法的调用\" class=\"headerlink\" title=\"情况二：作为对象方法的调用\"></a>情况二：作为对象方法的调用</h2><p>函数还可以作为某个对象方法调用，这时this就指这个上级对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">le o = &#123;&#125;</span><br><span class=\"line\">o.x = <span class=\"number\">1</span></span><br><span class=\"line\">o.m = test</span><br><span class=\"line\">o.m() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>其实，我们这时返回看情况一，实际上可以看出”func1()“，可以理解为“window.func1()”，所以例子中的函数上下文便是this。</p>\n<h2 id=\"情况三：-作为构造函数调用\"><a href=\"#情况三：-作为构造函数调用\" class=\"headerlink\" title=\"情况三： 作为构造函数调用\"></a>情况三： 作为构造函数调用</h2><p>所谓构造函数，\b也就是通过这个函数生成一个新对象（object）。这个时候，this就是指这个新对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> test()</span><br><span class=\"line\">laert(o.x) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>运行结果为1，为了表明这时this对象不是全局对象，我对代码做一点改变：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> test()</span><br><span class=\"line\"></span><br><span class=\"line\">alert(x) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"情况四：-使用apply-和call-方法进行调用\"><a href=\"#情况四：-使用apply-和call-方法进行调用\" class=\"headerlink\" title=\"情况四： 使用apply()和call()方法进行调用\"></a>情况四： 使用apply()和call()方法进行调用</h2><p>\bapply()和call()是函数对象中的方法，它的作用是改变函数的调用对象，可以利用任何一个函数都可以显式指定任何一个对象作为其函数上下文。</p>\n<p>通过 apply() 方法来调用函数，我们要给 apply() 传入两个参数：一个作为函数上下文对象，另一个作为函数参数所组成的数组。call() 方法的使用方式类似，唯一不同的是给函数传入的参数是一个参数列表，而不是单个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">func.apply(obj1, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">func.call(obj2, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.result === <span class=\"number\">6</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.result === <span class=\"number\">15</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，<code>func.apply(obj1, [1, 2, 3]);</code> 将函数的上下文定义为 obj1，并且传入 1、2、3 三个参数，<code>func.call(obj2, 4, 5, 6);</code> 将函数的上下文定义为 obj2，并且传入 4、5、6 三个参数。</p>\n<p>那 apply 和 call 基本相同，那么我们该用哪一个呢？其实 apply 和 call 的区别仅仅在于调用时传入的参数不同，其他完全一样。所以，在选择时，主要看传入的参数。如果已知参数已经在数组里了则用 apply 即可，或者参数是动态生成的，可以把参数 push 进一个数组，然后再用 apply 调用。当参数数量已知，或者在参数里有很多无关的值则用 call 方法调用。</p>\n<h2 id=\"ES6-与-this\"><a href=\"#ES6-与-this\" class=\"headerlink\" title=\"ES6 与 this\"></a>ES6 与 this</h2><p>ES6 中引入了一个很棒的特性：箭头函数。说其棒，主要源于其书写简单，更重要的是其使得 this 更易于理解。</p>\n<p>ES6 中，箭头函数中始终会捕捉其所在上下文的 this 值，作为自己的 this。这一点非常重要，省去了我们很多的麻烦。但对于那些习惯了每个 function 中都有自己 this 的人来说，可能还有些不习惯。举个例子吧，就拿调用方式 2 中的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true，非箭头函数时指向 obj</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.func();</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，func 所在上下文的 this 值指向 window，而 func 是一个箭头函数，所以其里面的 this 会捕捉其所在上下文的 this 作为自己的 this， 所以 func 内的 this 也指向 window 对象。</p>\n<h2 id=\"其他补充\"><a href=\"#其他补充\" class=\"headerlink\" title=\"其他补充\"></a>其他补充</h2><blockquote>\n<p>利用 bind() 改变函数上下文</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;.bind(obj1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj2.func(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 5 引入了 <code>Function.prototype.bind</code>，其会创建一个绑定函数，当调用这个绑定函数时，函数上下文将会是 bind() 方法的第一个参数。上面的例子中，将 obj1 设置为函数上下文，所以利用 func 来调用函数时，函数的上下文为 obj1，而不是它的调用者 obj2。</p>\n<p>利用 Array 的 5 个方法改变函数上下文</p>\n<p>5 个方法分别是：</p>\n<p><code>Array.prototype.every(callbackfn [, thisArg ])</code><br><code>Array.prototype.some(callbackfn [, thisArg ])</code><br><code>Array.prototype.forEach(callbackfn [, thisArg ])</code><br><code>Array.prototype.map(callbackfn [, thisArg ])</code><br><code>Array.prototype.filter(callbackfn [, thisArg ])</code></p>\n<p>当调用以上 5 个方法时，传入的参数除了回调函数以外，还可以传入另外一个可选地参数，即函数上下文，代表回调函数中的函数上下文。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">\"segmentfault\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, ind</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, ind</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj);    <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;, obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    someData: <span class=\"string\">\"a string\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.staticFunction = myFun;</span><br><span class=\"line\">obj.staticFunction();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    myMethod : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myFun = obj.myMethod;</span><br><span class=\"line\">myFun();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    someData: <span class=\"string\">\"a string\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myFun.call(obj);</span><br></pre></td></tr></table></figure>\n<p>答案：</p>\n<p>window</p>\n<p>obj</p>\n<p>window</p>\n<p>obj</p>\n","site":{"data":{"melody":{"language":"en","menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"darker","social":{"github":"https://github.com/sijianian"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":true,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":"9bda50d8ad09c691b013c21b520dea45","stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"https://static.skynian.cn/flex-201853121119.jpg","top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<p><img src=\"https://static.skynian.cn/深入理解this-201861122106.jpg\" alt=\"\"></p>\n<p>this是JavaScript中的一个关键字，同时也是让人又爱又恨的特性。</p>","more":"<p>如果没有\b彻底理解\b和掌握这个特性，可能真的会一次又一次\b\b踩坑，不要问我是怎么知道的o(╯□╰)o</p>\n<p>可能this不是JS中最复杂的内容，但是它的细节也是蔚为大观。涉及到了函数、函数调用、eval、call/apply/bind、基本包装类型、构造函数实例化、严格模式等等。</p>\n<p>\b与此同时ES6引入的箭头函数和\bclass更是把this复杂化了。</p>\n<p>其实网上关于this的介绍和总结很多，但是不乏会有很多错漏的地方，笔者\b写这篇博客也是为了做一次总结，同时巩固，更重要的是希望能出坑……</p>\n<p>\b\b一个最基本的认知是，this的值会发生变化，但是有一个总的原则，那就是this指向的是调用函数的那个对象。</p>\n<h2 id=\"情况一：纯粹的函数调用\"><a href=\"#情况一：纯粹的函数调用\" class=\"headerlink\" title=\"情况\b一：纯粹的函数调用\"></a>情况\b一：纯粹的函数调用</h2><p>这是函数的最通常用法，属于全局性调用，因此this就代表着全局对象Global</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> func2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上述代码中，我们可以看出，如果不是处于严格模式下，函数的上下文是window对象，严格模式下，函数上下文为undefined。</p>\n<h2 id=\"情况二：作为对象方法的调用\"><a href=\"#情况二：作为对象方法的调用\" class=\"headerlink\" title=\"情况二：作为对象方法的调用\"></a>情况二：作为对象方法的调用</h2><p>函数还可以作为某个对象方法调用，这时this就指这个上级对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">le o = &#123;&#125;</span><br><span class=\"line\">o.x = <span class=\"number\">1</span></span><br><span class=\"line\">o.m = test</span><br><span class=\"line\">o.m() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>其实，我们这时返回看情况一，实际上可以看出”func1()“，可以理解为“window.func1()”，所以例子中的函数上下文便是this。</p>\n<h2 id=\"情况三：-作为构造函数调用\"><a href=\"#情况三：-作为构造函数调用\" class=\"headerlink\" title=\"情况三： 作为构造函数调用\"></a>情况三： 作为构造函数调用</h2><p>所谓构造函数，\b也就是通过这个函数生成一个新对象（object）。这个时候，this就是指这个新对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> test()</span><br><span class=\"line\">laert(o.x) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>运行结果为1，为了表明这时this对象不是全局对象，我对代码做一点改变：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> test()</span><br><span class=\"line\"></span><br><span class=\"line\">alert(x) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"情况四：-使用apply-和call-方法进行调用\"><a href=\"#情况四：-使用apply-和call-方法进行调用\" class=\"headerlink\" title=\"情况四： 使用apply()和call()方法进行调用\"></a>情况四： 使用apply()和call()方法进行调用</h2><p>\bapply()和call()是函数对象中的方法，它的作用是改变函数的调用对象，可以利用任何一个函数都可以显式指定任何一个对象作为其函数上下文。</p>\n<p>通过 apply() 方法来调用函数，我们要给 apply() 传入两个参数：一个作为函数上下文对象，另一个作为函数参数所组成的数组。call() 方法的使用方式类似，唯一不同的是给函数传入的参数是一个参数列表，而不是单个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">func.apply(obj1, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">func.call(obj2, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.result === <span class=\"number\">6</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.result === <span class=\"number\">15</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，<code>func.apply(obj1, [1, 2, 3]);</code> 将函数的上下文定义为 obj1，并且传入 1、2、3 三个参数，<code>func.call(obj2, 4, 5, 6);</code> 将函数的上下文定义为 obj2，并且传入 4、5、6 三个参数。</p>\n<p>那 apply 和 call 基本相同，那么我们该用哪一个呢？其实 apply 和 call 的区别仅仅在于调用时传入的参数不同，其他完全一样。所以，在选择时，主要看传入的参数。如果已知参数已经在数组里了则用 apply 即可，或者参数是动态生成的，可以把参数 push 进一个数组，然后再用 apply 调用。当参数数量已知，或者在参数里有很多无关的值则用 call 方法调用。</p>\n<h2 id=\"ES6-与-this\"><a href=\"#ES6-与-this\" class=\"headerlink\" title=\"ES6 与 this\"></a>ES6 与 this</h2><p>ES6 中引入了一个很棒的特性：箭头函数。说其棒，主要源于其书写简单，更重要的是其使得 this 更易于理解。</p>\n<p>ES6 中，箭头函数中始终会捕捉其所在上下文的 this 值，作为自己的 this。这一点非常重要，省去了我们很多的麻烦。但对于那些习惯了每个 function 中都有自己 this 的人来说，可能还有些不习惯。举个例子吧，就拿调用方式 2 中的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true，非箭头函数时指向 obj</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.func();</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，func 所在上下文的 this 值指向 window，而 func 是一个箭头函数，所以其里面的 this 会捕捉其所在上下文的 this 作为自己的 this， 所以 func 内的 this 也指向 window 对象。</p>\n<h2 id=\"其他补充\"><a href=\"#其他补充\" class=\"headerlink\" title=\"其他补充\"></a>其他补充</h2><blockquote>\n<p>利用 bind() 改变函数上下文</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;.bind(obj1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj2.func(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 5 引入了 <code>Function.prototype.bind</code>，其会创建一个绑定函数，当调用这个绑定函数时，函数上下文将会是 bind() 方法的第一个参数。上面的例子中，将 obj1 设置为函数上下文，所以利用 func 来调用函数时，函数的上下文为 obj1，而不是它的调用者 obj2。</p>\n<p>利用 Array 的 5 个方法改变函数上下文</p>\n<p>5 个方法分别是：</p>\n<p><code>Array.prototype.every(callbackfn [, thisArg ])</code><br><code>Array.prototype.some(callbackfn [, thisArg ])</code><br><code>Array.prototype.forEach(callbackfn [, thisArg ])</code><br><code>Array.prototype.map(callbackfn [, thisArg ])</code><br><code>Array.prototype.filter(callbackfn [, thisArg ])</code></p>\n<p>当调用以上 5 个方法时，传入的参数除了回调函数以外，还可以传入另外一个可选地参数，即函数上下文，代表回调函数中的函数上下文。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">\"segmentfault\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, ind</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, ind</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj);    <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;, obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    someData: <span class=\"string\">\"a string\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.staticFunction = myFun;</span><br><span class=\"line\">obj.staticFunction();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    myMethod : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myFun = obj.myMethod;</span><br><span class=\"line\">myFun();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    someData: <span class=\"string\">\"a string\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myFun.call(obj);</span><br></pre></td></tr></table></figure>\n<p>答案：</p>\n<p>window</p>\n<p>obj</p>\n<p>window</p>\n<p>obj</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhujrk980000alphl80o3kz7","category_id":"cjhujrk9i0003alph0c10k5jl","_id":"cjhujrk9m0006alph7kluyu0f"},{"post_id":"cjiac5mz900006xfyruubkfrn","category_id":"cjia9okwx000152fy1x7naex4","_id":"cjiac5mze00026xfytqktpnxo"}],"PostTag":[{"post_id":"cjhujrk980000alphl80o3kz7","tag_id":"cjhujrk9j0004alph9lovzs5s","_id":"cjhujrk9l0005alphi3kcucu3"},{"post_id":"cjiac5mz900006xfyruubkfrn","tag_id":"cjia9okwz000252fyzjtqysmd","_id":"cjiac5mzc00016xfyqk7rnnjz"}],"Tag":[{"name":"CSS","_id":"cjhujrk9j0004alph9lovzs5s"},{"name":"Javascript","_id":"cjia9okwz000252fyzjtqysmd"}]}}