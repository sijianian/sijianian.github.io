(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{590:function(t,s,n){"use strict";n.r(s);var a=n(8),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"eventemitter-的基本用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-的基本用法"}},[t._v("#")]),t._v(" EventEmitter 的基本用法")]),t._v(" "),n("p",[t._v("在 Node 里面，events 模块提供了 EventEmitter 的 Class 类，可以直接创建一个事件实例")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// events 是 Node 的 built-in 模块，它提供了 EventEmitter 类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EventEmitter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 EventEmitter 的事件实例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ee "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventEmitter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为实例增加 open 事件的监听以及注册回调函数，事件名甚至可以是中文")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'事件发生了，第一个监听回调函数执行'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为实例再增加一个 增加 open 事件的监听器")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'事件发生了，第二个监听回调函数执行'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 emit 来发出事件，所有该事件队列里的回调函数都会顺序执行")]),t._v("\nee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'触发后，隔一秒再触发一次'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件发生了，第一个监听回调函数执行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件发生了，第二个监听回调函数执行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发后，隔一秒再触发一次")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件发生了，第一个监听回调函数执行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件发生了，第二个监听回调函数执行")]),t._v("\n")])])]),n("p",[t._v("一个事件实例上有如下的属性和方法：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("addListener(event, listener)")]),t._v(": 向事件队列后面再增加一个监听器")]),t._v(" "),n("li",[n("code",[t._v("emit(event, [arg1], [arg2], […])")]),t._v(": 向事件队列触发一个事件，同时可以对该事件传过去更多的数据")]),t._v(" "),n("li",[n("code",[t._v("listeners(event)")]),t._v(": 返回事件队列中特定的事件监听对象")]),t._v(" "),n("li",[n("code",[t._v("on(event, listener)")]),t._v(": 针对一个特定的事件注册监听器，该监听器就是一个回调函数")]),t._v(" "),n("li",[n("code",[t._v("once(event, listener)")]),t._v(": 与 on 一样，只不过它只会执行一次，只生效一次")]),t._v(" "),n("li",[n("code",[t._v("removeAllListeners([event])")]),t._v(": 移除所有指定事件的监听器，不指定的话，移除所有监听器，也就是清空事件队列")]),t._v(" "),n("li",[n("code",[t._v("removeListener(event, listener)")]),t._v(": 只移除特定事件监听器")]),t._v(" "),n("li",[n("code",[t._v("setMaxListeners(n)")]),t._v(": 设置监听器数组的最大数量，默认是 10，超过 10 个会收到 Node 的警告")])]),t._v(" "),n("p",[t._v("通过 "),n("code",[t._v("Node")]),t._v(" 内建的 "),n("code",[t._v("events")]),t._v("，我们可以通过继承它来实现更灵活的类控制，给予类实例更多的控制颗粒度，即便是游戏规则变更，从代码的耦合度和维护性上看，后面这一种实现都会更轻量更灵活。")]),t._v(" "),n("h2",{attrs:{id:"音乐播放器项目地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#音乐播放器项目地址"}},[t._v("#")]),t._v(" 音乐播放器项目地址")]),t._v(" "),n("p",[t._v("TODO")]),t._v(" "),n("h2",{attrs:{id:"音乐播放器项目目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#音乐播放器项目目录"}},[t._v("#")]),t._v(" 音乐播放器项目目录")]),t._v(" "),n("p",[t._v("TODO")])])}),[],!1,null,null,null);s.default=e.exports}}]);