(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{562:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。")]),t._v(" "),a("p",[t._v("2009 年，W3C 提出了一种新的方案")]),t._v(" "),a("p",[t._v("Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。")]),t._v(" "),a("p",[t._v("这次笔者简单谈谈 flexbox 中的 5 个常见的属性")]),t._v(" "),a("h2",{attrs:{id:"属性-1-display-flex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-1-display-flex"}},[t._v("#")]),t._v(" 属性 1：Display:Flex")]),t._v(" "),a("p",[t._v("以下是实例页面：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/GdVT2yZcYCEa7wh.gif",alt:"flex-2018531202637.gif"}})]),t._v(" "),a("p",[t._v("我们可以看到，在灰色的容器中，包含了 4 种不同颜色与大小的 div 元素，每个元素都默认 display:block ，因此每个立方体都占据了一行的整个宽度。")]),t._v(" "),a("p",[t._v("为了开始使用 Flexbox 布局，需要把容器变成 Flex 容器")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#container")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" -webkit-flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 兼容性写法\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/hGHwtovUefVYgxP.gif",alt:"flex-2018531204333.gif"}})]),t._v(" "),a("h2",{attrs:{id:"属性-2-flex-direction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2-flex-direction"}},[t._v("#")]),t._v(" 属性 2：Flex Direction")]),t._v(" "),a("p",[t._v("Flexbox 容器有两根轴：主轴和垂直的交叉轴，默认情况如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/tiCId2BZSO9cUXs.png",alt:"flex-2018531204418.gif"}})]),t._v(" "),a("p",[a("strong",[t._v("项目默认是由主轴（从左到右）排列的")]),t._v("，这就是你使用 display:flex 后，四方体以水平线排列的原因")]),t._v(" "),a("p",[t._v("而 Flex-direction 决定了主轴的方向")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#container")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/Nx5KQhTmeXS1HCB.gif",alt:"flex-2018531204454.gif"}})]),t._v(" "),a("p",[a("strong",[t._v("这里有一个重要的区别：")]),t._v(" flex-direction:column")]),t._v(" "),a("p",[a("strong",[t._v("所指的是四方体将沿主轴的垂直方向对齐，它使主轴自身从水平到垂直")])]),t._v(" "),a("p",[t._v("而 flex-direction 还有一些其他的值供你选择，例如：row-reverse 与 column-reverse")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/ruQsTePAvoOBhZY.gif",alt:"flex-2018531204544.gif"}})]),t._v(" "),a("h2",{attrs:{id:"属性-3-justify-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-3-justify-content"}},[t._v("#")]),t._v(" 属性 3：Justify Content")]),t._v(" "),a("p",[t._v("justify-content 属性定义了项目在主轴上的对齐方式。")]),t._v(" "),a("p",[t._v("在这里，你将更多的了解主轴与交叉轴的区别。首先，让我们回到 flex-direction:row 值上")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#container")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("justify-content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex-start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("justify-content 属性包含了 5 个值供你使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Flex-start\n\nFlex-end\n\nCenter\n\nSpace-between\n\nSpace-around\n")])])]),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/8vNuFhKcM5otilx.gif",alt:"flex-2018531204619.gif"}})]),t._v(" "),a("p",[t._v("Space-around 与 Space-between 是两个不容易直观理解的值。Space-between 实现了两端对齐，而四方体之间的间隔都是相等的。\nSpace-around 使四方体两侧的间隔相等，这意味着四方体之间的间隔比最外边四方体与边框的间隔要大一倍。（每个四方体贡献了不重叠的等量余量，从而使空间翻倍）")]),t._v(" "),a("p",[t._v("最后一点：请记住 justify-content 沿主轴对齐，而 flex-direction 决定了主轴的方向。它将决定你移动的方向。")]),t._v(" "),a("h2",{attrs:{id:"属性-4-align-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-4-align-items"}},[t._v("#")]),t._v(" 属性 4：Align Items")]),t._v(" "),a("p",[t._v("当你理解了 justify-content 属性，理解 Align Items 属性就变得轻而易举了。")]),t._v(" "),a("p",[t._v("justify-content 定义了项目在主轴的对齐方式，而 align-items 属性则定义了项目在交叉轴上是如何对齐的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/7S1AOL6Erb4z5PG.png",alt:""}})]),t._v(" "),a("p",[t._v("当我们将 flex-direction 属性值重置为 row 后，我们的轴看上去就与上图一致。那么，让我们深入的了解下 Align Items 属性有哪些值：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("flex-start\n\nflex-end\n\ncenter\n\nstretch\n\nbaseline\n")])])]),a("p",[t._v("前三个值与 justify-content 属性中的值完全一致，没有太多需要解释的地方。")]),t._v(" "),a("p",[t._v("但是，接下来两个值却有些不同。")]),t._v(" "),a("p",[t._v("Stretch 指的是如果项目未设置高度或设为 auto，项目将占满整个容器。而 baseline 是指项目将与段落标签的底部对齐。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/ZpchzrqnakwBXFQ.gif",alt:"flex-2018531204725.gif"}})]),t._v(" "),a("p",[t._v("（请注意，对于 align-items：stretch，我不得不将四方体的高度设置为 auto，否则 height 属性将覆盖该 stretch）")]),t._v(" "),a("p",[t._v("对于 baseline，如果你去掉段落标签，它则会对齐四方形的底部，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/CV9pw1FvPI3ueYa.png",alt:"flex-2018531204754.gif"}})]),t._v(" "),a("p",[t._v("为了更好地演示主轴和交叉轴的表现，在基于 justify-content 属性和 align-items 属性的值为 center 的情况下，让我们看看赋予 flex-direction 属性两个不同值后，它的表现如何：")]),t._v(" "),a("p",[t._v("我们可以看到，对于 row 值，四方体沿着与主轴水平方向排列，而对于 column 值，它们则沿着与主轴垂直的方向排列。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/SglQNTmiMpLdnkP.gif",alt:"flex-2018531204835.gif"}})]),t._v(" "),a("h2",{attrs:{id:"属性-5-align-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-5-align-self"}},[t._v("#")]),t._v(" 属性 5：Align Self")]),t._v(" "),a("p",[t._v("align-self 属性允许你对特定的项目有与其他项目不一样的对齐方式，它可覆盖 align-items 属性。虽然它的默认值为 auto，但它继承了父元素 align-items 的属性。除了 auto 外，其他都与 align-items 属性完全一致。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#container")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("align-items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex-start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".square#one")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("align-self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们将在四个四方体上应用 align-self 属性，而其余的四方体则应用 align-items:center 与 flex-direction:row，让我们看看会发生什么")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/12/DflZ2opug6yMTO4.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),a("p",[t._v("虽然我们只是仅仅了解了 Flexbox 的一些浅层的用法，但是已足够入门")])])}),[],!1,null,null,null);s.default=n.exports}}]);